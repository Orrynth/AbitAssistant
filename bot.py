from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

import asyncio
import logging

from utils.parsers import get_programs_info  # –ò–º–ø–æ—Ä—Ç –ø–∞—Ä—Å–µ—Ä–∞

from ollama import chat
from ollama import ChatResponse

programs_data = []

TOKEN = 'YOUR-TOKEN-HERE'
logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(
        parse_mode=ParseMode.HTML
    )
)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!\n\n'
        '–¢—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º:\n'
    )
    for program in programs_data:
        text += f"üìå <b>{program['name']}</b>\n"
    await message.answer(text)


@dp.message()
async def handle_user_question(message: Message):
    global programs_data
    user_text = message.text.strip()

    response: ChatResponse = chat(model='llama3.2', messages=[
        {
            'role': 'system',
            'content': f'–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö: {str(programs_data)}'
        },
        {
            'role': 'user',
            'content': user_text
        },
    ])

    await message.answer(response.message.content)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    global programs_data
    programs_data = get_programs_info()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
